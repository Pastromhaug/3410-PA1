#test file for MIPS32

#tests EX/MEM -> EX forwarding for first register
addiu $1, $0, 12	# 12 stored in reg 1
addiu $2, $1, 14	# 26 stored in reg 2	

#tests EX/MEM -> EX forwarding for second register
addiu $3, $0, 13	# 13 stored in reg 3
addu $4, $0, $3		# 13 stored in reg 4

#tests EX/MEM -> EX forwarding for both registers
addiu $5, $0, 14	# 14 stored in reg 5
addu $6, $5, $5		# 28 stored in reg 6


#tests MEM/WB -> EX forwarding for first register
addiu $1, $0, 12	# 12 stored in reg 1
sll $0, $0, 0		# nop
addiu $2, $1, 14	# 26 stored in reg 2	

#tests MEM/WB -> EX forwarding for second register
addiu $3, $0, 13	# 13 stored in reg 3
sll $0, $0, 0		# nop
addu $4, $0, $3		# 13 stored in reg 4

#tests MEM/WB -> EX forwarding for both registers
addiu $5, $0, 14	# 14 stored in reg 5
sll $0, $0, 0		# nop
addu $6, $5, $5		# 28 stored in reg 6

#tests register bypass forwarding for first register
addiu $1, $0, 12	# 12 stored in reg 1
sll $0, $0, 0		# nop
sll $0, $0, 0		# nop
addiu $2, $1, 14	# 26 stored in reg 2	

#tests register bypass forwarding for second register
addiu $3, $0, 13	# 13 stored in reg 3
sll $0, $0, 0		# nop
sll $0, $0, 0		# nop
addu $4, $0, $3		# 13 stored in reg 4

#tests register bypass forwarding for both registers
addiu $5, $0, 14	# 14 stored in reg 5
sll $0, $0, 0		# nop
sll $0, $0, 0		# nop
addu $6, $5, $5		# 28 stored in reg 6

#testing immediate arithmetic instructions
addiu $1, $0, 8		# 8 is stored in reg 1
addiu $2, $0, 10	# 10 is stored in reg 2
andi $3, $1, 9		# 8 is stored in reg 3
ori $4, $2, 16		# 26 is stored in reg 4
xori $5, $1, 9		# 1 is stored in reg 5
slti $6, $3, 11		# 1 is stored in reg 6
slti $7, $3, -9		# 0 is stored in reg 7
sltiu $8, $3, 11	# 1 is stored in reg 8
sltiu $9, $3, -9	# 1 is stored in reg 9
sltiu $10, $3, 5	# 0 is stored in reg 10

#testing register arithmetic instructions
addiu $1, $0, -12	#-12 stored in reg 1
addiu $2, $0, 5		# 5 stored in reg 2
addiu $3, $0, 7		# 7 stored in reg 3
addu $4, $2, $1		# -7 stored in reg 3
subu $5, $3, $2		# 2 stored in reg 5
and $6, $2, $3		# 5 stored in reg 6
or $7, $2, $3		# 7 stored in reg 7
xor $8, $2, $3		# 2 stored in reg 8
nor $9, $1, $2		# 10 stored in reg 9
slt $10, $2, $1		# 0 stored in reg 10
slt $11, $1, $2		# 1 stored in reg 11
sltu $12, $2, $1	# 1 stored in reg 12
sltu $13, $3, $2	# 0 stored in reg 13

#testing movn
addiu $1, $0, 9		# 9 stored in reg 1
addiu $2, $0, 50	# 50 stored in reg 2
addiu $3, $0, 10	# 10 stored in reg 3
addiu $4, $0, 2		# 2 stored in reg 4
movn $3, $2, $0		# reg 3 is unchanged and is still 10
movn $4, $2, $1		# reg 4 changes to 50

#testing movz
#movz
addiu $1, $0, -1	# -1 stored in reg 1
addiu $2, $0, 4		# 4 stored in reg 2
addiu $3, $0, 20	# 20 stored in reg 3
addiu $4, $0, 1		# 1 stored in reg 4
movz $3, $2, $0		# reg 3 changes to 4
movz $4, $2, $1		# reg 4 is unchanged and still is 1

#testing shifts
addiu $1, $0, 4		# 4 is stored in reg 1
addiu $2, $0, 48	# 48 is stored in reg 2
addiu $3, $0, -32	# -32 is stored in reg 3
sll $4, $1, 3		# 32 is stored in reg 4
srl $5, $2, 4		# 3 is stored in reg 5
sra $6, $2, 4		# 3 is stored in reg 6
sra $7, $3, 2		# -8 is stored in reg 7
sllv $8, $2, $1		# 768 is stored in reg 8
srlv $9, $2, $1		# 3 is stored in reg 9
srav $10, $2, $1	# 3 is stored in reg 10
srav $11, $3, $1	# -2 is stored in reg 11

#testing lui
#lui
lui $1, 1 	# 65536 stored in 1
lui $2, 4	# 262144 stored in 2

#testing non-implemented instructions
addiu $1, $0, 8		# 8 is stored in reg 1
addiu $2, $0, 1		# 1 is stored in reg 2

#if any of the branches/jumps execute, it will be stuck in an infinite loop
EXIT:
j EXIT
jr $1
jal EXIT
jalr $1, $2
addiu $3, $0, 9		# 9 is stored in reg 3
beq $1, $2, EXIT
bne $1, $2, EXIT
blez $1, EXIT
bgtz $1, EXIT
bltz $1, EXIT
addiu $4, $0, 10	# 10 is stored in reg 4
bgez $1, EXIT
lw $3, 0($2)
lb $4, 0($1)
addiu $5, $0, 11	# 11 is stored in reg 5
lbu $5, 0($1)
sw $1, 0($6)
sb $1, 0($7)

